/**
 * Generic API Error Schema and Related Constants
 *
 * This file defines a generic structure for representing API errors from various
 * cryptocurrency exchanges in a normalized way. It also includes suggested
 * categories for classifying these errors.
 */

// === Normalized Error Categories ===
// An application can use these categories to handle errors more systematically.
const NORMALIZED_ERROR_CATEGORIES = {
    AUTHENTICATION_ERROR: "AUTHENTICATION_ERROR",       // Problems with API keys, signature, permissions.
    INVALID_REQUEST_ERROR: "INVALID_REQUEST_ERROR",   // Errors due to bad input parameters, validation failures, incorrect format.
    RATE_LIMIT_ERROR: "RATE_LIMIT_ERROR",           // Request rate exceeded the allowed limit.
    INSUFFICIENT_FUNDS_ERROR: "INSUFFICIENT_FUNDS_ERROR", // Not enough balance for the operation.
    ORDER_LOGIC_ERROR: "ORDER_LOGIC_ERROR",           // Errors related to order placement rules (e.g., min size, price precision, market conditions).
    NETWORK_ERROR: "NETWORK_ERROR",                 // Issues with network connectivity to the exchange.
    EXCHANGE_SYSTEM_ERROR: "EXCHANGE_SYSTEM_ERROR",     // General or unexpected errors from the exchange's backend (e.g., HTTP 5xx errors).
    NOT_FOUND_ERROR: "NOT_FOUND_ERROR",             // Requested resource (e.g., order, symbol) does not exist.
    PERMISSION_DENIED_ERROR: "PERMISSION_DENIED_ERROR", // API key lacks permissions for the requested action.
    TIMEOUT_ERROR: "TIMEOUT_ERROR",                 // Request to the exchange timed out.
    ACCOUNT_SUSPENDED_ERROR: "ACCOUNT_SUSPENDED_ERROR", // Account is suspended or restricted.
    MAINTENANCE_ERROR: "MAINTENANCE_ERROR",           // Exchange is undergoing maintenance.
    UNKNOWN_ERROR: "UNKNOWN_ERROR"                  // Any other error that doesn't fit the categories above.
};

// === Generic API Error Object Structure ===
/**
 * Represents a normalized API error.
 * Applications can map exchange-specific errors to this structure.
 */
const GenericApiError = {
    timestamp: "",              // string | number: ISO 8601 timestamp or milliseconds epoch when the error was generated/processed by the application.
    source_exchange: "",        // string: Name of the exchange that produced the error (e.g., "Binance", "Coinbase").
    http_status_code: 0,        // number | null: The HTTP status code returned by the exchange, if applicable.
    original_error_code: "",    // string | number | null: The specific error code provided by the exchange (e.g., Binance's -1121, Coinbase's "INVALID_REQUEST").
    original_error_message: "", // string: The raw error message from the exchange.
    normalized_error_category: NORMALIZED_ERROR_CATEGORIES.UNKNOWN_ERROR, // string: One of the NORMALIZED_ERROR_CATEGORIES.
    details: {},                // object | string | null: Any additional details, which could be the full original error object from the exchange, or other contextual info.
    request_id: "",             // string | null: (Optional) A request or correlation ID if provided by the exchange or generated by the client.
    endpoint_path: ""           // string | null: (Optional) The API endpoint path that was called.
};

// --- Example of how exchange-specific errors might be conceptualized in relation to GenericApiError ---
/*
// From binanceResponseExamples.js:
const BinanceErrorResponse = {
  code: 0,      // Maps to original_error_code
  msg: ""       // Maps to original_error_message
};

// From coinbaseResponseExamples.js:
const CoinbaseErrorResponse = {
  error: "",        // Maps to original_error_code (or part of it)
  message: "",      // Maps to original_error_message
  error_details: "" // Could be part of details in GenericApiError
};

// Example mapping function (conceptual)
function mapToGenericError(exchangeError, exchangeName, httpStatus, endpoint) {
    let genericError = { ...GenericApiError };
    genericError.timestamp = new Date().toISOString();
    genericError.source_exchange = exchangeName;
    genericError.http_status_code = httpStatus;
    genericError.endpoint_path = endpoint;

    if (exchangeName === "Binance") {
        genericError.original_error_code = exchangeError.code;
        genericError.original_error_message = exchangeError.msg;
        genericError.details = { ...exchangeError };
        // Add logic to determine normalized_error_category based on Binance codes
        if (exchangeError.code === -1022) genericError.normalized_error_category = NORMALIZED_ERROR_CATEGORIES.AUTHENTICATION_ERROR;
        // ... more mapping rules
    } else if (exchangeName === "Coinbase") {
        genericError.original_error_code = exchangeError.error;
        genericError.original_error_message = exchangeError.message;
        genericError.details = { ...exchangeError };
        // Add logic to determine normalized_error_category based on Coinbase errors
        if (exchangeError.error === "AUTHENTICATION_ERROR") genericError.normalized_error_category = NORMALIZED_ERROR_CATEGORIES.AUTHENTICATION_ERROR;
        // ... more mapping rules
    }
    // ...
    return genericError;
}
*/

// If using Node.js or a module system, you might want to export them:
// module.exports = { // For CommonJS
//   NORMALIZED_ERROR_CATEGORIES,
//   GenericApiError
// };
// Or for ES Modules:
// export {
//   NORMALIZED_ERROR_CATEGORIES,
//   GenericApiError
// };

// console.log("Generic API Error Schemas loaded"); // For testing
